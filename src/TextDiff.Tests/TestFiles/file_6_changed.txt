using System;
using System.Collections.Generic;
using System.Linq;

namespace PaymentProcessing
{
    public class Payment
    {
        public void ProcessPayment(decimal amount)
        {
            if(amount <= 0)
            {
                throw new ArgumentException("Amount must be greater than zero.");
            }
            Console.WriteLine($"Processing payment of {amount}");
            LogPayment(amount);
        }

        public bool ValidatePayment(decimal amount)
        {
            if(amount <= 0)
            {
                return false;
            }
            // Additional validation rules can be added here
            return amount > 0 && amount < 10000;
        }

        public void LogPayment(decimal amount)
        {
            Console.WriteLine($"Payment of {amount} has been successfully logged.");
        }

        public decimal CalculateTax(decimal amount)
        {
            var taxRate = GetTaxRate();
            return amount * taxRate;
        }

        private decimal GetTaxRate()
        {
            return 0.15m;
        }

        public void RefundPayment(decimal amount)
        {
            if(amount <= 0)
            {
                throw new ArgumentException("Refund amount must be greater than zero.");
            }
            Console.WriteLine($"Refunding payment of {amount}");
        }

        public void GenerateReceipt(decimal amount)
        {
            Console.WriteLine($"Receipt generated for payment of {amount}");
        }
    }
}
